# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './ui/des.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QWheelEvent
from PyQt5.QtCore import Qt, QEvent
from b_graphicsView import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.mat
        MainWindow.resize(1059, 709)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        # self.graphicsView = M1_QGraphicsView(self.centralwidget)
        self.graphicsView = M1_QGraphicsView(self.centralwidget.parent().b_platform,self.centralwidget.parent())
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 1061, 661))
        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.graphicsView)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1059, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_file.setObjectName("actionOpen_file")
        self.actionSave_file = QtWidgets.QAction(MainWindow)
        self.actionSave_file.setObjectName("actionSave_file")
        self.actionOuit = QtWidgets.QAction(MainWindow)
        self.actionOuit.setObjectName("actionOuit")
        self.actionZoom_in = QtWidgets.QAction(MainWindow)
        self.actionZoom_in.setObjectName("actionZoom_in")
        self.actionZoom_out = QtWidgets.QAction(MainWindow)
        self.actionZoom_out.setObjectName("actionZoom_out")
        self.actionNormal_view = QtWidgets.QAction(MainWindow)
        self.actionNormal_view.setObjectName("actionNormal_view")
        self.menuFile.addAction(self.actionOpen_file)
        self.menuFile.addAction(self.actionSave_file)
        self.menuFile.addAction(self.actionOuit)
        self.menuView.addAction(self.actionZoom_in)
        self.menuView.addAction(self.actionZoom_out)
        self.menuView.addAction(self.actionNormal_view)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuAbout.setTitle(_translate("MainWindow", "Help"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.actionOpen_file.setText(_translate("MainWindow", "Open file"))
        self.actionSave_file.setText(_translate("MainWindow", "Save file"))
        self.actionOuit.setText(_translate("MainWindow", "Ouit"))
        self.actionZoom_in.setText(_translate("MainWindow", "Zoom in"))
        self.actionZoom_in.setShortcut(_translate("MainWindow", "Ctrl+="))
        self.actionZoom_out.setText(_translate("MainWindow", "Zoom out"))
        self.actionZoom_out.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.actionNormal_view.setText(_translate("MainWindow", "Normal size"))
        self.actionNormal_view.setShortcut(_translate("MainWindow", "Ctrl+0"))


class M1_QGraphicsView_Demo(QtWidgets.QGraphicsView):

    def wheelEvent(self, event: QWheelEvent):
        factor = 1.1
        if event.angleDelta().x() or event.angleDelta().y() < 0:
            factor = 0.9
        view_pos = event.pos()
        scene_pos = self.mapToScene(view_pos)
        self.centerOn(scene_pos)
        self.scale(factor, factor)
        delta = self.mapToScene(view_pos) - self.mapToScene(
            self.viewport().rect().center())
        self.centerOn(scene_pos - delta)

    def mousePressEvent(self, event: QtGui.QMouseEvent) -> None:

        if event.button() == Qt.LeftButton:
            self.bar_x = event.x()
            self.bar_y = event.x()
            print('OK!!! self.bar_x',self.bar_x)

    # def mouseMoveEvent(self, event: QtGui.QMouseEvent) -> None:
    #     print('event.x() === ' + str(event.x()),'event.y() === '+str(event.y()))
    #     print('self.horizontalScrollBar().x() ==== ' + str(self.horizontalScrollBar().x()))
    #     print('self.horizontalScrollBar().x() ==== ' + str(self.horizontalScrollBar().value()))
    #     print('self.bar_x --> ' + str(self.bar_x))
    #     # self.bar_y
    #     # self.horizontalScrollBar().setValue(self.horizontalScrollBar().value()+ (2 if self.bar_x > event.x() else -2))
    #     # self.verticalScrollBar().setValue(self.verticalScrollBar().value()+ (2 if self.bar_y > event.y() else -2))
    #     # self.verticalScrollBar().setValue(self.horizontalScrollBar().y()+ event.y())
    #     # self.horizontalScrollBar().setValue(self.verticalScrollBar().x()+ event.x())


    def mouseMoveEvent(self, a0: QtGui.QMouseEvent) -> None:
        self.show_statusbar_msm('DROWWWWW')
        x, y = a0.x() +self.scroll_area.horizontalScrollBar().value(), a0.y() +self.scroll_area.verticalScrollBar().value()
        if BWindowWorker.IS_NEW_CREATE_MODE:

            if self.active_point:
                self.result_f_mat = self.b_area_drawer.draw_temp_line(self.temp_f_mat,
                                                                      self.b_figure_worker.get_current_figure(), x,
                                                                  y)
        elif BWindowWorker.IS_SELECT_FIGURE_MODE:
            print('1 self.is_press_rb : ', self.is_press_rb)
            if self.is_press_rb:
                print('1 self.is_press_rb : ', self.is_press_rb)
                if self.select_point:
                    print('2 self.select_point : ', self.select_point)
                    self.select_point.set_x(x)
                    self.select_point.set_y(y)
                    self.reload_mat()
        self.update()
